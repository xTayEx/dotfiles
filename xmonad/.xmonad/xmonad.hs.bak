import           System.IO
import           XMonad
import           XMonad.Layout.Grid
import           XMonad.Layout.MultiColumns
import           XMonad.Hooks.DynamicLog
import           XMonad.Hooks.FadeInactive
import           XMonad.Hooks.ManageDocks
import           XMonad.Layout.Spacing
import           XMonad.Util.EZConfig      (additionalKeysP)
import           XMonad.Util.Run           (spawnPipe)
import           XMonad.Prompt.ConfirmPrompt
import           System.Exit

myUsername :: String
myUsername = "xtayex"

myTerminal :: String
myTerminal = "kitty"
myModMask = mod4Mask

-- Color of current workspace in xmobar.
xmobarCurrentWorkspaceColor :: String
xmobarCurrentWorkspaceColor = "#8be9fd"

myWorkspaces :: [String]
myWorkspaces = clickable workspaceLabels
    where
        clickable l =
            [ "<action=xdotool key super+"
              ++ show i
              ++ " button=1>"
              ++ ws
              ++ "</action>"
            | (i, ws) <- zip [1..9] l
            ]
        workspaceLabels = zipWith makeLabel [1 .. 9 :: Int] icons
        makeLabel index (fontIndex, icon, subscpritIndex) = "  <fn=" ++ show fontIndex ++ ">" ++ icon ++ "</fn>" ++ subscpritIndex
        icons =
            [ (1, "\xf120", "₁") -- 1
            , (2, "\xf282", "₂") -- 2
            , (2, "\xf1d7", "₃") -- 3
            , (1, "\xf2b5", "₄") -- 4
            , (1, "\xf87c", "₅") -- 5
            , (1, "\xf001", "₆") -- 6
            , (1, "\xf1c2", "₇") -- 7
            , (1, "\x0041", "₈") -- 8
            , (1, "\x0042", "₉") -- 9
            ]

myAdditionalKeys :: [(String, X ())]
myAdditionalKeys =
  [
    ("M-d", spawn "rofi -show combi -combi-modes \"run,drun,ssh\" -modes combi")
  , ("M-p", spawn "")
  , ("M-a", spawn "flameshot gui")
  , ("M-q", spawn "pkill xmobar && xmonad --restart")
  , ("M-S-q", confirmPrompt def "exit" $ io exitSuccess)
  , ("<XF86MonBrightnessUp>", spawn "lux -a 5%")
  , ("<XF86MonBrightnessDown>", spawn "lux -s 5%")
  , ("<XF86AudioMute>", spawn "pulseaudio-ctl mute")
  , ("<XF86AudioRaiseVolume>", spawn "pulseaudio-ctl up 2")
  , ("<XF86AudioLowerVolume>", spawn "pulseaudio-ctl down 2")
  ]

myStatusBar :: String
myStatusBar = "xmobar -d /home/" ++ myUsername ++ "/.config/xmobar/xmobar.hs"

-- myStartupHook :: X ()
-- myStartupHook = spawn "compton --config /home/xtayex/.config/compton.conf"
--                 >> spawn "feh --bg-fill /home/xtayex/Pictures/wallpapers/yunnan001.jpg"
myStartupHook :: X ()
myStartupHook = spawn ("picom --config /home/" ++ myUsername ++ "/.config/picom.conf")
                >> spawn ("feh --bg-fill /home/" ++ myUsername ++ "/Pictures/wallpapers/yunnan001.jpg")
                >> spawn "/home/xtayex/Downloads/Clash.for.Windows-0.19.14-x64-linux/clash_launch.sh"
myFocusedBorderColor = "#8be9fd"

myLogHook :: Handle -> X ()
myLogHook xmproc = do
    fadeInactiveLogHook 1.0
    dynamicLogWithPP $ xmobarPP
        { ppOutput = hPutStrLn xmproc
        , ppTitle = const ""
        , ppLayout = const ""
        , ppCurrent = xmobarColor xmobarCurrentWorkspaceColor ""
        , ppWsSep = " \57521"
        }

myLayout = spacingWithEdge 5 $ 
           avoidStruts $
           layoutTall ||| layoutGrid ||| layoutMirror ||| layoutFull ||| layoutMultiColumns
        where
            layoutTall = Tall 1 (3/100) (1/2)
            layoutGrid = Grid
            layoutMirror = Mirror (Tall 1 (3/100) (3/5))
            layoutMultiColumns = multiCol [1] 1 0.01 (-0.5)
            layoutFull = Full

main :: IO ()
main = do
    xmproc <- spawnPipe myStatusBar
    xmonad $ docks def
        {
            terminal = myTerminal
          , modMask = myModMask
          , layoutHook = myLayout
          -- , layoutHook = spacingWithEdge 5 $ avoidStruts $ layoutHook def
          , manageHook = manageHook def <+> manageDocks
          , startupHook = myStartupHook
          , workspaces = myWorkspaces
          , logHook = myLogHook xmproc
          , focusedBorderColor = myFocusedBorderColor
        } `additionalKeysP` myAdditionalKeys
